name: From Monolith to K8s (Github Actions)
on: [ push ]

env:
  OWNER: salaboy
  GH_PAGES_BRANCH_NAME: gh-pages

permissions:
  packages: write

jobs:
  setup:
    runs-on: ubuntu-20.04
    steps:
      - name: Info
        run: echo "Building ${{ github.repository }} application, branch/tag ${{ github.ref_name}}"
      - name: From Monolith to K8S CI
        id: fmtok8s_ci
        uses: salaboy/fmtok8s-ci@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_branch: main
      - name: Set up Docker Meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,
            type=semver,pattern={{raw}}
      - name: Docker Meta Output
        run: echo "Docker meta tags ${{ steps.docker_meta.outputs.tags }}"
    outputs:
      docker_tags: ${{ steps.docker_meta.outputs.tags }}
      docker_labels: ${{ steps.docker_meta.outputs.labels }}
      execute_helm_publish: ${{ steps.fmtok8s_ci.outputs.execute_helm_publish }}
      execute_docker_publish: ${{ steps.fmtok8s_ci.outputs.execute_docker_publish }}
      version_to_use: ${{ steps.fmtok8s_ci.outputs.version_to_use }}
  build:
    needs: [ setup ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout and Set up JDK 17 Temurin
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin
          cache: 'maven'
      - name: Build application
        run: mvn package
      - name: Upload app.jar
        uses: actions/upload-artifact@v3
        with:
          name: app-target
          path: target/
  publish:
    needs: [ setup, build ]
    runs-on: ubuntu-20.04
    if: ${{ needs.setup.outputs.execute_docker_publish == 'true' }}
    #    TODO: verify if is necessary to publish when the push is not on 'main' branch
    #    TODO: know which we will use for
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download app.jar from build job
        uses: actions/download-artifact@v3
        with:
          name: app-target
          path: target/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
#      - name: Set up app.jar
#        run: mkdir target && mv app.jar target/app.jar
      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.OWNER }}
          password: ${{ secrets.PACKAGE_TOKEN }}
      - name: Echo labels and tags
        run: |
          echo ${{ needs.setup.outputs.docker_labels }}
          echo ${{ needs.setup.outputs.docker_tags }} 
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ needs.setup.outputs.docker_tags }}
          labels: ${{ needs.setup.outputs.docker_labels }}
  publish_chart:
    runs-on: ubuntu-20.04
    needs: [ setup, build ]
    if: ${{ needs.setup.outputs.execute_helm_publish == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Change Chart.yml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'helm/fmtok8s-frontend/Chart.yaml'
          propertyPath: 'version'
          value: '${{ needs.setup.outputs.version_to_use }}'
          commitChange: false
          updateFile: true
      - name: Change values.yml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'helm/fmtok8s-frontend/values.yaml'
          propertyPath: 'image.tag'
          value: '${{ needs.setup.outputs.version_to_use }}'
          commitChange: false
          updateFile: true
      - name: Release Helm Chart
        uses: stefanprodan/helm-gh-pages@master
        with:
          charts_dir: helm
          token: ${{ secrets.PACKAGE_TOKEN }}
          repository: helm
          branch: ${{ env.GH_PAGES_BRANCH_NAME }}
          owner: ${{ env.OWNER }}